@using System.Drawing
@model IEnumerable<CategoryResponse>
@{
    ViewBag.Title = "Tasks";
    Layout = "~/Views/Shared/_Layout_task.cshtml";
}
<link href="~/CSS/StyleTaskHome.css" rel="stylesheet" />
<div class='app'>
    <main class='project'>
        <div class='project-info'>
            <h1>Homepage</h1>
        </div>
        <div class='project-tasks'>
            <div class='project-column'>
                <div class='project-column-heading'>
                    <h2 class='project-column-heading__title'>Need make</h2><button class='project-column-heading__options'><i class="fas fa-ellipsis-h"></i></button>
                </div>

                @foreach (CategoryResponse category in Model)
                {
                    Random random = new Random();
                    Color color = Color.FromArgb(random.Next(200, 255), random.Next(200, 255), random.Next(200, 255));
                    string redHex = color.R.ToString("X2");
                    string greenHex = color.G.ToString("X2");
                    string blueHex = color.B.ToString("X2");
                    string colorString = $"#{redHex}{greenHex}{blueHex}";

                    foreach (TaskResponse task in category.Tasks)
                    {
                        @if (task.Status == Status.Active)
                        {
                            <div class='task' draggable='true'>
                                <div class='task__tags'>
                                    <span class='task__tag' style="background-color:@colorString">@category.Name</span>
                                    <div class="dropdown">
                                        <button class="mainmenubtn"></button>
                                        <div class="dropdown-child">
                                            <a asp-action="TaskDetails" asp-controller="Task" asp-route-taskId="@task.Id">Details</a>
                                            <a>Edit</a>
                                            <a>Delete</a>
                                        </div>
                                    </div>
                                </div>
                                <p>@task.Title</p>
                                <div class='task__stats'>
                                    <span><time>@task.FinishTime.ToString("yyyy-MM-dd")</time></span>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
            <div class='project-column'>
                <div class='project-column-heading'>
                    <h2 class='project-column-heading__title'>Done</h2>
                    <button class='project-column-heading__options'><i class="fas fa-ellipsis-h"></i></button>
                </div>

                @foreach (CategoryResponse category in Model)
                {
                    Random random = new Random();
                    Color color = Color.FromArgb(random.Next(200, 255), random.Next(200, 255), random.Next(200, 255));
                    string redHex = color.R.ToString("X2");
                    string greenHex = color.G.ToString("X2");
                    string blueHex = color.B.ToString("X2");
                    string colorString = $"#{redHex}{greenHex}{blueHex}";

                    foreach (TaskResponse task in category.Tasks)
                    {
                        @if (task.Status == Status.Done)
                        {
                            <div class='task' draggable='true'>
                                <div class='task__tags'>
                                    <span class='task__tag' style="background-color:@colorString">@category.Name</span>
                                    <button class='project-column-heading__options'></button>
                                </div>  
                                <p>@task.Title</p>
                                <div class='task__stats'>
                                    <span><time>@task.FinishTime.ToString("yyyy-MM-dd")</time></span>
                                </div>
                            </div>
                        }
                    }
                }

            </div>

        </div>
    </main>
    <aside class='task-details'>
        <div class='tag-progress'>
            <h2>Task Progress</h2>
            <div class='tag-progress'>
                <p>Copywriting <span>3/8</span></p>
                <progress class="progress progress--copyright" max="8" value="3"> 3 </progress>
            </div>
            <div class='tag-progress'>
                <p>Illustration <span>6/10</span></p>
                <progress class="progress progress--illustration" max="10" value="6"> 6 </progress>
            </div>
            <div class='tag-progress'>
                <p>UI Design <span>2/7</span></p>
                <progress class="progress progress--design" max="7" value="2"> 2 </progress>
            </div>
        </div>
    </aside>
</div>

<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        var dragSrcEl = null;

        function handleDragStart(e) {
            this.style.opacity = '0.1';
            this.style.border = '3px dashed #c4cad3';

            dragSrcEl = this;
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.innerHTML);
        }
        function handleDragOver(e) {
            if (e.preventDefault) {
                e.preventDefault();
            }
            e.dataTransfer.dropEffect = 'move';

            return false;
        }
        function handleDragEnter(e) {
            this.classList.add('task-hover');
        }
        function handleDragLeave(e) {
            this.classList.remove('task-hover');
        }
        function handleDrop(e) {
            if (e.stopPropagation) {
                e.stopPropagation(); // stops the browser from redirecting.
            }

            if (dragSrcEl != this) {
                dragSrcEl.innerHTML = this.innerHTML;
                this.innerHTML = e.dataTransfer.getData('text/html');
            }

            return false;
        }
        function handleDragEnd(e) {
            this.style.opacity = '1';
            this.style.border = 0;

            items.forEach(function (item) {
                item.classList.remove('task-hover');
            });
        }
        let items = document.querySelectorAll('.task');
        items.forEach(function (item) {
            item.addEventListener('dragstart', handleDragStart, false);
            item.addEventListener('dragenter', handleDragEnter, false);
            item.addEventListener('dragover', handleDragOver, false);
            item.addEventListener('dragleave', handleDragLeave, false);
            item.addEventListener('drop', handleDrop, false);
            item.addEventListener('dragend', handleDragEnd, false);
        });
    });
</script>
